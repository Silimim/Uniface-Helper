{
    "about": {
        "prefix": "$about",
        "body": [
            "\\$about"
        ],
        "description": "Returns information about the current Uniface installation, version, and platform."
    },
    "abs(Value)": {
        "prefix": "$abs",
        "body": [
            "\\$abs('$1')"
        ],
        "description": "Return the absolute value of a numeric value."
    },
    "acos(Value)": {
        "prefix": "$acos",
        "body": [
            "\\$acos('$1')"
        ],
        "description": "Return the arc cosine of value."
    },
    "applname": {
        "prefix": "$applname",
        "body": [
            "\\$applname"
        ],
        "description": "Return the name of the Application Shell."
    },
    "applproperties": {
        "prefix": "$applproperties",
        "body": [
            "\\$applproperties"
        ],
        "description": "Set the presentation properties of the application shell."
    },
    "appltitle": {
        "prefix": "$appltitle",
        "body": [
            "\\$appltitle"
        ],
        "description": "Return or set the window title bar text of a Uniface Windows application."
    },
    "asin(Value)": {
        "prefix": "$asin",
        "body": [
            "\\$asin('$1')"
        ],
        "description": "Return the arc sine of value."
    },
    "atan(Value)": {
        "prefix": "$atan",
        "body": [
            "\\$atan('$1')"
        ],
        "description": "Return the arc tangent of value."
    },
    "batch": {
        "prefix": "$batch",
        "body": [
            "\\$batch"
        ],
        "description": "Return the batch mode indicator."
    },
    "bold": {
        "prefix": "$bold",
        "body": [
            "\\$bold"
        ],
        "description": "Apply the bold character attribute to a string."
    },
    "callup": {
        "prefix": "$callup",
        "body": [
            "\\$callup"
        ],
        "description": "For the trigger that is currently being executed, call that same trigger one level up in the hierarchy. If the trigger is not defined one level up, then the next available level up is called (if applicable)."
    },
    "char": {
        "prefix": "$char",
        "body": [
            "\\$char"
        ],
        "description": "In a Unifield, return the Uniface character code for the key that activated a trigger."
    },
    "check": {
        "prefix": "$check",
        "body": [
            "\\$check"
        ],
        "description": "Return or set the checked status of a menu item."
    },
    "clearselection": {
        "prefix": "$clearselection",
        "body": [
            "\\$clearselection"
        ],
        "description": "Built-in entity operation that clears the $selected attribute of all occurrences of the entity."
    },
    "clock(Source)": {
        "prefix": "$clock",
        "body": [
            "\\$clock('$1')"
        ],
        "description": "Return the system time or convert the argument to the Time data type."
    },
    "collhandle(Entity)->$selectedoccs | $clearselection()": {
        "prefix": "$collhandle",
        "body": [
            "\\$collhandle('$1')->"
        ],
        "description": "Returns the handle of the specified entity."
    },
    "columnsyntax(Field, {Attributelist})": {
        "prefix": "$columnsyntax",
        "body": [
            "\\$columnsyntax('$1', {'$2'})"
        ],
        "description": "Set or return the syntax attributes for the field displayed in a column of a grid or multi-occurrence list."
    },
    "componentinfo(InstanceName, TopicName)": {
        "prefix": "$componentinfo",
        "body": [
            "\\$componentinfo('$1', '$2')"
        ],
        "description": "Return information about a component instance."
    },
    "componentname(InstanceName)": {
        "prefix": "$componentname",
        "body": [
            "\\$componentname('$1')"
        ],
        "description": "Return the name of the component from which the specified instance was created."
    },
    "componenttype(InstanceName | ComponentName)": {
        "prefix": "$componenttype",
        "body": [
            "\\$columnsyntax('$1')"
        ],
        "description": "Return the type of the specified component instance."
    },
    "concat(String1, String2, ..., String5)": {
        "prefix": "$concat",
        "body": [
            "\\$concat('$1', '$2')"
        ],
        "description": "Concatenate up to 5 strings."
    },
    "condition(Condition, {DataList})": {
        "prefix": "$condition",
        "body": [
            "\\$condition('$1')"
        ],
        "description": "Return the result of evaluating a conditional expression."
    },
    "cos(Value)": {
        "prefix": "$cos",
        "body": [
            "\\$cos('$1')"
        ],
        "description": "Return the cosine of value."
    },
    "CurEntProperties(Entity, {Properties})": {
        "prefix": "$CurEntProperties",
        "body": [
            "\\$CurEntProperties('$1', '$2')"
        ],
        "description": "Set properties for an inner entity within the current occurrence of its parent entity."
    },
    "curhits(Entity)": {
        "prefix": "$curhits",
        "body": [
            "\\$curhits('$1')"
        ],
        "description": "Return the number of occurrences in the hitlist."
    },
    "curkey": {
        "prefix": "$curkey",
        "body": [
            "\\$curkey"
        ],
        "description": "Return the number of the current key in a validateKey or leaveModifiedKey trigger."
    },
    "curocc(Entity)": {
        "prefix": "$curocc",
        "body": [
            "\\$curocc('$1')"
        ],
        "description": "Return the sequence number of the current occurrence in the hitlist."
    },
    "curoccvideo(Entity, {Option})": {
        "prefix": "$curoccvideo",
        "body": [
            "\\$curoccvideo('$1', '$2')"
        ],
        "description": "Set or return the video properties for fields of the current occurrence."
    },
    "curline": {
        "prefix": "$curline",
        "body": [
            "\\$curline"
        ],
        "description": "Return the line on which the cursor is positioned in the current Unifield."
    },
    "curword": {
        "prefix": "$curword",
        "body": [
            "\\$curword"
        ],
        "description": "Return the word on which the cursor is positioned in the current Unifield."
    },
    "dataerrorcontext": {
        "prefix": "$dataerrorcontext",
        "body": [
            "\\$dataerrorcontext"
        ],
        "description": "Return the context of the last validation error."
    },
    "date(Source)": {
        "prefix": "$date",
        "body": [
            "\\$date('$1')"
        ],
        "description": "Return the current date or convert the argument to the Date data type."
    },
    "datim(Source)": {
        "prefix": "$datim",
        "body": [
            "\\$datim('$1')"
        ],
        "description": "Return the system date and time, or convert the argument to the Datetime data type."
    },
    "dberror": {
        "prefix": "$dberror",
        "body": [
            "\\$dberror"
        ],
        "description": "Return the error code reported by the DBMS."
    },
    "dberrortext": {
        "prefix": "$dberrortext",
        "body": [
            "\\$dberrortext"
        ],
        "description": "Return the text of an error reported by the DBMS."
    },
    "dbocc(Entity)": {
        "prefix": "$dbocc",
        "body": [
            "\\$dbocc('$1')"
        ],
        "description": "Return the sequence number of the current occurrence within the set of occurrences retrieved from the database."
    },
    "decode(Algorithm, Source, {key, {Mode, InitializationVector}})": {
        "prefix": "$decode",
        "body": [
            "\\$decode('$1', '$2')"
        ],
        "description": "Decrypt or decode data, or verify a message by means of a digital signature."
    },
    "decode(Algorithm, Source, Key, Signature )": {
        "prefix": "$decode",
        "body": [
            "\\$decode('$1', '$2', '$3', '$4')"
        ],
        "description": "Decrypt or decode data, or verify a message by means of a digital signature."
    },
    "direction": {
        "prefix": "$direction",
        "body": [
            "\\$direction"
        ],
        "description": "Return the structure editor mode (Next or Previous)."
    },
    "disable": {
        "prefix": "$disable",
        "body": [
            "\\$disable"
        ],
        "description": "Disables a menu item in a menu object."
    },
    "display": {
        "prefix": "$display",
        "body": [
            "\\$display"
        ],
        "description": "Return the name of the current display device translation table."
    },
    "def_charset": {
        "prefix": "$def_charset",
        "body": [
            "\\$def_charset"
        ],
        "description": "Set or return the value of $DEF_CHARSET, which defines the character set used for storing data in String fields with C packing code."
    },
    "detachedinstances": {
        "prefix": "$detachedinstances",
        "body": [
            "\\$detachedinstances"
        ],
        "description": "Return a list of detached instances."
    },
    "dirlist( DirPath, {Topic})": {
        "prefix": "$dirlist",
        "body": [
            "\\$dirlist('$1', '$2')"
        ],
        "description": "Return the contents of the specified directory."
    },
    "displaylength(String)": {
        "prefix": "$displaylength",
        "body": [
            "\\$displaylength('$1')"
        ],
        "description": "Return the display length of a String when displayed in the system character set."
    },
    "e()": {
        "prefix": "$e",
        "body": [
            "\\$e($1)"
        ],
        "description": "Return the value of e (Euler's number), the base of the natural logarithm"
    },
    "editmode": {
        "prefix": "$editmode",
        "body": [
            "\\$editmode"
        ],
        "description": "Return or set a value that determines the degree to which a user can change data on the form component."
    },
    "empty(Frame)": {
        "prefix": "$empty",
        "body": [
            "\\$empty('$1')"
        ],
        "description": "Return the empty frame status for an entity or named area frame."
    },
    "encode(Algorithm, Source, {Key, {Mode, InitializationVector}})": {
        "prefix": "$encode",
        "body": [
            "\\$encode('$1', '$2')"
        ],
        "description": "Encrypt data, sign messages with digital signatures, or convert data from one encoding scheme to another."
    },
    "entinfo(Entity, Topic)": {
        "prefix": "$entinfo",
        "body": [
            "\\$entinfo('$1', '$2')"
        ],
        "description": "Return information about an entity."
    },
    "entname(Entity)": {
        "prefix": "$entname",
        "body": [
            "\\$entname('$1')"
        ],
        "description": "Return the name of the current entity or check for the existence of an entity in the component."
    },
    "error": {
        "prefix": "$error",
        "body": [
            "\\$error"
        ],
        "description": "Returns the Uniface message number for the error."
    },
    "equalStructRefs(Struct1, Struct2)": {
        "prefix": "$equalStructRefs",
        "body": [
            "\\$equalStructRefs('$1', '$2')"
        ],
        "description": "Checks whether two variables of type struct reference the same physical Struct."
    },
    "exp(Value)": {
        "prefix": "$exp",
        "body": [
            "\\$exp('$1')"
        ],
        "description": "Return the exponential of Value (e Value)."
    },
    "exp10(Value)": {
        "prefix": "$displaylength",
        "body": [
            "\\$displaylength('$1')"
        ],
        "description": "Return the base 10 exponential of Value (10 Value)."
    },
    "expression(Expression, {DataList})": {
        "prefix": "$expression",
        "body": [
            "\\$expression('$1', '$2')"
        ],
        "description": "Return the result of evaluating a nonconditional expression."
    },
    "fact(Value)": {
        "prefix": "$fact",
        "body": [
            "\\$fact('$1')"
        ],
        "description": "Calculate the factorial of Value (Value!)."
    },
    "$fieldcheck(Field)": {
        "prefix": "$fieldcheck",
        "body": [
            "\\$fieldcheck('$1')"
        ],
        "description": "Return or set the requirement for field validation."
    },
    "$fielddbmod(Field)": {
        "prefix": "$fielddbmod",
        "body": [
            "\\$fielddbmod('$1')"
        ],
        "description": "Return the modification status of a database field."
    },
    "$fielddbvalue(Field)": {
        "prefix": "$fielddbvalue",
        "body": [
            "\\$fielddbvalue('$1')"
        ],
        "description": "Return the original value of a field as it was retrieved from the database."
    },
    "$fieldendmod(Field)": {
        "prefix": "$fieldendmod",
        "body": [
            "\\$fieldendmod('$1')"
        ],
        "description": "Return the modification status of a field when the field is exited."
    },
    "$fieldhandle(Field)": {
        "prefix": "$fieldhandle",
        "body": [
            "\\$fieldhandle('$1')"
        ],
        "description": "Return a partner handle to the widget that is currently bound to the specified field of the current occurrence."
    },
    "$fieldindb(Field)": {
        "prefix": "$fieldindb",
        "body": [
            "\\$fieldindb('$1')"
        ],
        "description": "Check whether a field is a database field, or not."
    },
    "$fieldinfo(Field, Topic)": {
        "prefix": "$fieldinfo",
        "body": [
            "\\$fieldinfo('$1', '$2')"
        ],
        "description": "Return information about a field."
    },
    "$fieldmod(Field)": {
        "prefix": "$fieldmod",
        "body": [
            "\\$fieldmod('$1')"
        ],
        "description": "Return the modification status of a field."
    },
    "$fieldname(Field)": {
        "prefix": "$fieldname",
        "body": [
            "\\$fieldname('$1')"
        ],
        "description": "Return the name of the current field or check for the presence of a specified field in the component."
    },
    "$fieldprofile(Field)": {
        "prefix": "$fieldprofile",
        "body": [
            "\\$fieldprofile('$1')"
        ],
        "description": "Return a value that indicates whether the user has entered a profile character in a field."
    },
    "$fieldproperties(Field, {PropertyList})": {
        "prefix": "$fieldproperties",
        "body": [
            "\\$fieldproperties('$1', '$2')"
        ],
        "description": "Return or set the current widget properties of an instance of a field."
    },
    "$fieldsyntax(Field)": {
        "prefix": "$fieldsyntax",
        "body": [
            "\\$fieldsyntax('$1')"
        ],
        "description": "Set or return the syntax attributes of the specified field."
    },
    "$fieldvalrep(Field, {List})": {
        "prefix": "$fieldvalrep",
        "body": [
            "\\$fieldvalrep('$1', )"
        ],
        "description": "Return or set the associative (ValRep) list for an instance of a field."
    },
    "$fieldvalidation(Field)": {
        "prefix": "$fieldvalidation",
        "body": [
            "\\$fieldvalidation('$1')"
        ],
        "description": "Identify whether a field requires validation."
    },
    "$fieldvideo(Field)": {
        "prefix": "$fieldvideo ",
        "body": [
            "\\$fieldvideo('$1')"
        ],
        "description": "Return or set the video attributes of the specified field."
    },
    "$fileexists(FilePath | DirPath)": {
        "prefix": "$fileexists",
        "body": [
            "\\$fileexists('$1')"
        ],
        "description": "Returns a value that indicates whether the specified file or directory exists."
    },
    "$fileproperties(FilePath | DirPath, {Topic})": {
        "prefix": "$fileproperties",
        "body": [
            "\\$fileproperties('$1', '$2')"
        ],
        "description": "Return the properties of the specified file, directory, or zip archive, taking file redirections in the assignment file into account."
    },
    "$foreign(Entity)": {
        "prefix": "$foreign",
        "body": [
            "\\$foreign('$1')"
        ],
        "description": "Return a boolean value that indicates whether the entity is an Up entity in the component structure."
    },
    "$format": {
        "prefix": "$format",
        "body": [
            "\\$format"
        ],
        "description": "Return the field data, formatted according to the display format (DIS)."
    },
    "$formfocus": {
        "prefix": "$formfocus",
        "body": [
            "\\$formfocus"
        ],
        "description": "Return the name of the Form instance that has focus."
    },
    "$formmodality(InstanceName)": {
        "prefix": "$formmodality",
        "body": [
            "\\$formmodality('$1')"
        ],
        "description": "Return an indication of the form modality for the requested form instance."
    },
    "$formtitle": {
        "prefix": "$formtitle",
        "body": [
            "\\$formtitle"
        ],
        "description": "Return or set the title of the window title containing the Form instance."
    },
    "$frac(Value)": {
        "prefix": "$frac",
        "body": [
            "\\$frac('$1')"
        ],
        "description": "Return the fractional part of Value."
    },
    "$framedepth(Entity)": {
        "prefix": "$framedepth",
        "body": [
            "\\$framedepth('$1')"
        ],
        "description": "Return the number of lines needed to print a frame as drawn on the component, without allowing for expansion"
    },
    "$gui": {
        "prefix": "$gui",
        "body": [
            "\\$gui"
        ],
        "description": "Return the mnemonic (CHR or MSW) for the user interface."
    },
    "$hide": {
        "prefix": "$hide",
        "body": [
            "\\$hide"
        ],
        "description": "Return or set the display status of a menu item."
    },
    "$hits(Entity)": {
        "prefix": "$hits",
        "body": [
            "\\$hits('$1')"
        ],
        "description": "Return the number of occurrences in the hitlist."
    },
    "$idpart(AssociativeListItem)": {
        "prefix": "$idpart",
        "body": [
            "\\$idpart('$1')"
        ],
        "description": "Return the ID part of an associative list item."
    },
    "$inlinemenu": {
        "prefix": "$inlinemenu",
        "body": [
            "\\$inlinemenu"
        ],
        "description": "Insert or retrieve one or more menu items at the location of a dynamic menu placeholder"
    },
    "$instancechildren(InstanceName)": {
        "prefix": "$instancechildren",
        "body": [
            "\\$instancechildren('$1')"
        ],
        "description": "Return a list of component instances attached to a specified component instance."
    },
    "$instancedb(InstanceName)": {
        "prefix": "$instancedb",
        "body": [
            "\\$instancedb('$1')"
        ],
        "description": "Return an indication whether data in the current instance has been retrieved from a database."
    },
    "$instancedbmod(InstanceName)": {
        "prefix": "$instancedbmod",
        "body": [
            "\\$instancedbmod('$1')"
        ],
        "description": "Return the modification status of database fields in the current component instance."
    },
    "$instancehandle(InstanceName)": {
        "prefix": "$instancehandle",
        "body": [
            "\\$instancehandle('$1')"
        ],
        "description": "Return the handle of the requested component instance."
    },
    "$instancelayout": {
        "prefix": "$instancelayout",
        "body": [
            "\\$instancelayout"
        ],
        "description": "Return or set the layout property of the current component instance."
    },
    "$instancemod(InstanceName)": {
        "prefix": "$instancemod",
        "body": [
            "\\$instancemod('$1')"
        ],
        "description": "Return or set the modification status of data in the current component instance."
    },
    "$instancename": {
        "prefix": "$instancename",
        "body": [
            "\\$instancename"
        ],
        "description": "Return the name of the current component instance."
    },
    "$instanceparent(InstanceName)": {
        "prefix": "$instanceparent",
        "body": [
            "\\$instanceparent('$1')"
        ],
        "description": "Return the name of the parent instance of the specified component instance."
    },
    "$instancepath(InstanceName)": {
        "prefix": "$instancepath",
        "body": [
            "\\$instancepath('$1')"
        ],
        "description": "Return the path with which the current component instance is registered."
    },
    "$instances(ComponentName, Filter)": {
        "prefix": "$instances",
        "body": [
            "\\$instances('$1', '$2')"
        ],
        "description": "Return a list of component instances that belong to a specified component."
    },
    "$instancevalidation(InstanceName)": {
        "prefix": "$instancevalidation",
        "body": [
            "\\$instancevalidation('$1')"
        ],
        "description": "Identify whether data in the component instance requires validation."
    },
    "$int(Value)": {
        "prefix": "$int",
        "body": [
            "\\$int('$1')"
        ],
        "description": "Return the integer part of Value."
    },
    "$interactive": {
        "prefix": "$interactive",
        "body": [
            "\\$interactive"
        ],
        "description": "Return a boolean value indicating whether the current Form component is in interactive state."
    },
    "$ioprint": {
        "prefix": "$ioprint",
        "body": [
            "\\$ioprint"
        ],
        "description": "Return or set the message level in the message frame."
    },
    "$italic(String)": {
        "prefix": "$italic",
        "body": [
            "\\$italic('$1')"
        ],
        "description": "Apply the italic character attribute to a string in a Unifield."
    },
    "$item(ID, AssociativeList)": {
        "prefix": "$item",
        "body": [
            "\\$item('$1', '$2')"
        ],
        "description": "Return the value that corresponds to a given ID in an associative list."
    },
    "$itemcount(List)": {
        "prefix": "$itemcount",
        "body": [
            "\\$itemcount('$1')"
        ],
        "description": "Return the number of items in a list."
    },
    "$itemnr(Index, List)": {
        "prefix": "$itemnr",
        "body": [
            "\\$itemnr($1, $2)"
        ],
        "description": "Return the list item that corresponds to a given index number in a list."
    },
    "$keyboard": {
        "prefix": "$keyboard",
        "body": [
            "\\$keyboard"
        ],
        "description": "Return or set the current keyboard translation table."
    },
    "$keycheck(Entity, KeyNumber)": {
        "prefix": "$keycheck",
        "body": [
            "\\$keycheck('$1', $2)"
        ],
        "description": "Indicate whether a specified primary or candidate key should be validated."
    },
    "$keyfields(Entity, KeyNumber)": {
        "prefix": "$keyfields",
        "body": [
            "\\$keyfields('$1', $2)"
        ],
        "description": "Return a list of the fields that make up a primary or candidate key or index."
    },
    "$keymod(Entity, KeyNumber)": {
        "prefix": "$keymod",
        "body": [
            "\\$keymod('$1', $2)"
        ],
        "description": "Return a value indicating whether the specified key has been modified."
    },
    "$keytype(Entity, KeyNumber)": {
        "prefix": "$keytype",
        "body": [
            "\\$keytype('$1', $2)"
        ],
        "description": "Return the type of the specified key."
    },
    "$keyvalidation(Entity, KeyNumber)": {
        "prefix": "$keyvalidation",
        "body": [
            "\\$keyvalidation('$1', $2)"
        ],
        "description": "Identify whether a primary or candidate key requires validation."
    },
    "$labelproperties(Field)": {
        "prefix": "$labelproperties",
        "body": [
            "\\$labelproperties('$1')"
        ],
        "description": "Get and set the text of an associated label in a Form."
    },
    "$language": {
        "prefix": "$language",
        "body": [
            "\\$language"
        ],
        "description": "Return or set the current language code used for language-related global objects and language setups."
    },
    "$lines": {
        "prefix": "$lines",
        "body": [
            "\\$lines"
        ],
        "description": "Return the number of lines remaining on the current page."
    },
    "$ldir": {
        "prefix": "$ldir",
        "body": [
            "\\$ldir($1)"
        ],
        "description": "Return the name of the working directory."
    },
    "$ldirlist(DirPath, {Topic})": {
        "prefix": "$ldirlist",
        "body": [
            "\\$ldirlist('$1', '$2')"
        ],
        "description": "Return the contents of the specified directory."
    },
    "$length(String)": {
        "prefix": "$length",
        "body": [
            "\\$length('$1')"
        ],
        "description": "Return the length of the specified argument."
    },
    "$lfileexists(FilePath | DirPath)": {
        "prefix": "$lfileexists",
        "body": [
            "\\$lfileexists('$1')"
        ],
        "description": "Returns a value that indicates whether the specified file or directory exists."
    },
    "$lfileproperties(FilePath | DirPath, {Topic})": {
        "prefix": "$lfileproperties",
        "body": [
            "\\$lfileproperties('$1', '$2')"
        ],
        "description": "Return the properties of the specified file, directory, or zip archive, ignoring any file redirections in the assignment file."
    },
    "$log(Value)": {
        "prefix": "$log",
        "body": [
            "\\$log($1)"
        ],
        "description": "Return the natural logarithm of Value (log e Value)."
    },
    "$log10(Value)": {
        "prefix": "$log10",
        "body": [
            "\\$log10($1)"
        ],
        "description": "Return the base 10 logarithm of X (log10X)."
    },
    "$logical(LogicalName)": {
        "prefix": "$logical",
        "body": [
            "\\$logical('$1')"
        ],
        "description": "Return the value of an application logical."
    },
    "$lowercase(String, {'NlsLocale' | 'classic' })": {
        "prefix": "$lowercase",
        "body": [
            "\\$lowercase('$1', '$2')"
        ],
        "description": "Convert a string to lowercase."
    },
    "$ltrim (Source, Pattern)": {
        "prefix": "$ltrim ",
        "body": [
            "\\$ltrim ('$1', '$2')"
        ],
        "description": "Trim the left side of a string from the left, following a pattern."
    },
    "$modelname(EntityName)": {
        "prefix": "$modelname",
        "body": [
            "\\$modelname('$1')"
        ],
        "description": "Return the value of the Model property (the suffix of the entity name) of the specified entity"
    },
    "$msgdata": {
        "prefix": "$msgdata",
        "body": [
            "\\$msgdata"
        ],
        "description": "Return the message data received from postmessage."
    },
    "$msgdst": {
        "prefix": "$msgdst",
        "body": [
            "\\$msgdst"
        ],
        "description": "Return the name of the component instance to which a message was addressed."
    },
    "$msgid": {
        "prefix": "$msgid",
        "body": [
            "\\$msgid"
        ],
        "description": "Return the identifier for a message received from postmessage."
    },
    "$msginfo(Topic)": {
        "prefix": "$msginfo",
        "body": [
            "\\$msginfo('$1')"
        ],
        "description": "Return the requested information about the latest message."
    },
    "$msgsrc": {
        "prefix": "$msgsrc",
        "body": [
            "\\$msgsrc"
        ],
        "description": "Return the name of the component instance that sent the message."
    },
    "$newstruct": {
        "prefix": "$newstruct",
        "body": [
            "\\$newstruct"
        ],
        "description": "Explicitly create a new Struct with no members."
    },
    "$next(Field)": {
        "prefix": "$next",
        "body": [
            "\\$next('$1')"
        ],
        "description": "Return the value of the next occurrence of a field."
    },
    "$nlscase": {
        "prefix": "$nlscase",
        "body": [
            "\\$nlscase"
        ],
        "description": "Return the current value of the NLS case setting, or set it to a new value to apply or ignore locale-based case conversion rules."
    },
    "$nlsformat": {
        "prefix": "$nlsformat",
        "body": [
            "\\$nlsformat"
        ],
        "description": "Set or return the current NLS format value, which determines how locale-sensitive data is displayed."
    },
    "$nlsinternaltime": {
        "prefix": "$nlsinternaltime",
        "body": [
            "\\$nlsinternaltime"
        ],
        "description": "Specify whether to use Coordinated Universal Time (UTC+00:00) as the internal time zone."
    },
    "$nlslocale": {
        "prefix": "$nlslocale",
        "body": [
            "\\$nlslocale"
        ],
        "description": "Set or return the current locale (language and country), or locale setting."
    },
    "$nlslocalelist": {
        "prefix": "$nlslocalelist",
        "body": [
            "\\$nlslocalelist"
        ],
        "description": "Return a list of valid locales or the system locale."
    },
    "$nlssortorder": {
        "prefix": "$nlssortorder",
        "body": [
            "\\$nlssortorder"
        ],
        "description": "Set or return the current sequencing rules to apply when sorting strings in entities and lists, or reading occurrences from the hitlist."
    },
    "$nlstimezone": {
        "prefix": "$nlstimezone",
        "body": [
            "\\$nlstimezone"
        ],
        "description": "Return the current external time zone setting, or set it to a new value."
    },
    "$nlstimezonelist": {
        "prefix": "$nlstimezonelist",
        "body": [
            "\\$nlstimezonelist"
        ],
        "description": "Returns a list of time zones or the system time zone."
    },
    "$nmforms": {
        "prefix": "$nmforms",
        "body": [
            "\\$nmforms"
        ],
        "description": "Return a list of all non-modal form instances in the component pool."
    },
    "$number(NumericString)": {
        "prefix": "$number",
        "body": [
            "\\$number('$1')"
        ],
        "description": "Returns a numeric value derived from a numeric string."
    },
    "$occcheck(Entity)": {
        "prefix": "$occcheck",
        "body": [
            "\\$occcheck('$1')"
        ],
        "description": "Return or set the requirement for checking an occurrence."
    },
    "$occcrc(Entity)": {
        "prefix": "$occcrc",
        "body": [
            "\\$occcrc('$1')"
        ],
        "description": "Set or return the CRC checksum of an occurrence."
    },
    "$occdbmod(Entity)": {
        "prefix": "$occdbmod",
        "body": [
            "\\$occdbmod('$1')"
        ],
        "description": "Return the modification status of a database occurrence."
    },
    "$occdel(Entity)": {
        "prefix": "$occdel",
        "body": [
            "\\$occdel('$1')"
        ],
        "description": "Returns the removal status of an occurrence."
    },
    "$occdepth(Entity)": {
        "prefix": "$occdepth",
        "body": [
            "\\$occdepth('$1')"
        ],
        "description": "Return the depth of the occurrence in the layout."
    },
    "$occhandle(Entity)": {
        "prefix": "$occhandle",
        "body": [
            "\\$occhandle('$1')"
        ],
        "description": "Returns the handle of the current occurrence of the specified entity."
    },
    "$occmod(Entity)": {
        "prefix": "$occmod",
        "body": [
            "\\$occmod('$1')"
        ],
        "description": "Return the modification status of an occurrence."
    },
    "$occproperties(Entity, {Property})": {
        "prefix": "$occproperties",
        "body": [
            "\\$occproperties('$1', '$2')"
        ],
        "description": "Returns or sets the properties of an occurrence."
    },
    "$occstatus(Entity)": {
        "prefix": "$occstatus",
        "body": [
            "\\$occstatus('$1')"
        ],
        "description": "Returns the modification status for each disconnected occurrence in a component."
    },
    "$occvalidation(Entity)": {
        "prefix": "$occvalidation",
        "body": [
            "\\$occvalidation('$1')"
        ],
        "description": "Check whether an occurrence requires validation."
    },
    "$ocxhandle(Field)": {
        "prefix": "$ocxhandle",
        "body": [
            "\\$ocxhandle('$1')"
        ],
        "description": "Return the handle of the requested OCX object."
    },
    "$oprsys": {
        "prefix": "$oprsys",
        "body": [
            "\\$oprsys"
        ],
        "description": "Return a mnemonic for the operating system used by Uniface."
    },
    "$page": {
        "prefix": "$page",
        "body": [
            "\\$page"
        ],
        "description": "Return the current page number in a Report or Form while printing."
    },
    "$paintedfieldproperties(Field, {PaintedOccurrence}, {PropertyList})": {
        "prefix": "$paintedfieldproperties",
        "body": [
            "\\$paintedfieldproperties('$1', '$2', '$3')"
        ],
        "description": "Return or set the position and size for a specific instance of a field widget in a Form."
    },
    "$paintedocc(Entity)": {
        "prefix": "$paintedocc",
        "body": [
            "\\$paintedocc('$1')"
        ],
        "description": "Return the number of occurrences the specified entity drawn (painted) on the foForm or Report."
    },
    "$password(Path)": {
        "prefix": "$password",
        "body": [
            "\\$password($1)"
        ],
        "description": "Return the encrypted password used to log on to a database path."
    },
    "$pi()": {
        "prefix": "$pi",
        "body": [
            "\\$pi($1)"
        ],
        "description": "Return the value of pi."
    },
    "$power(Value1, Value2)": {
        "prefix": "$power",
        "body": [
            "\\$power($1, $2)"
        ],
        "description": "Calculate the value of Value1 raised to the power of Value2 (Value1Value2)."
    },
    "$previous(Field)": {
        "prefix": "$previous",
        "body": [
            "\\$previous('$1')"
        ],
        "description": "Return the value of the field in the previous occurrence."
    },
    "$printing": {
        "prefix": "$printing",
        "body": [
            "\\$printing"
        ],
        "description": "Return a status indicating whether the current component is printing."
    },
    "$proc_profiling": {
        "prefix": "$proc_profiling",
        "body": [
            "\\$proc_profiling"
        ],
        "description": "Activate Uniface profiling, or check whether it is already enabled."
    },
    "$proc_tracing": {
        "prefix": "$proc_tracing",
        "body": [
            "\\$proc_tracing"
        ],
        "description": "Activate Uniface profiling, or check whether it is already enabled."
    },
    "$proc_tracing_addition": {
        "prefix": "$proc_tracing_addition",
        "body": [
            "\\$proc_tracing_addition"
        ],
        "description": "Return the current value of $proc_tracing_addition, or add a prefix, which can contain a string or expression, to each line of ProcScript tracing information."
    },
    "$processinfo(Topic, {ProcessId})": {
        "prefix": "$processinfo",
        "body": [
            "\\$processinfo('$1', '$2')"
        ],
        "description": "Returns information about a process. The returned information depends on the operating system."
    },
    "$procerror": {
        "prefix": "$procerror",
        "body": [
            "\\$procerror"
        ],
        "description": "Return the reason for an error in ProcScript execution."
    },
    "$procerrorcontext": {
        "prefix": "$procerrorcontext",
        "body": [
            "\\$procerrorcontext"
        ],
        "description": "Return the location of the error specified by $procerror."
    },
    "$procReturnContext": {
        "prefix": "$procReturnContext",
        "body": [
            "\\$procReturnContext"
        ],
        "description": "Get context information about the value returned by the ProcScript instruction that last set $procReturnContext."
    },
    "$properties(Field, {PropertyList})": {
        "prefix": "$properties",
        "body": [
            "\\$properties('$1', '$2')"
        ],
        "description": "Return or set the current widget properties of a field."
    },
    "$putmess": {
        "prefix": "$putmess",
        "body": [
            "\\$putmess"
        ],
        "description": "Send a message to the message frame, or return the contents of the message frame."
    },
    "$relation(Field)": {
        "prefix": "$relation",
        "body": [
            "\\$relation('$1')"
        ],
        "description": "Return the related key field."
    },
    "$replace(Source, StartPos, SearchFor, ReplaceWith, {Count})": {
        "prefix": "$replace",
        "body": [
            "\\$replace('$1', '$2', '$3', '$4', '$5')"
        ],
        "description": "Search and replace a substring of a string. The search and replace is case-sensitive."
    },
    "$result": {
        "prefix": "$result",
        "body": [
            "\\$result"
        ],
        "description": "Return the result of certain ProcScript commands and tree widget events."
    },
    "$rettype": {
        "prefix": "$rettype",
        "body": [
            "\\$rettype"
        ],
        "description": "Return the retrieval mode of the outermost entity."
    },
    "$rscan(Source, SearchFor)": {
        "prefix": "$rscan",
        "body": [
            "\\$rscan('$1', '$2')"
        ],
        "description": "Find a substring within a string, starting from the end of the string."
    },
    "$rtrim(Source, Pattern)": {
        "prefix": "$rtrim",
        "body": [
            "\\$rtrim('$1', '$2')"
        ],
        "description": "Trim a string on the right-hand side, following a pattern."
    },
    "$scan(Source, SearchFor)": {
        "prefix": "$scan",
        "body": [
            "\\$scan('$1', '$2')"
        ],
        "description": "Returns the position of a substring within a string."
    },
    "$selblk": {
        "prefix": "$selblk",
        "body": [
            "\\$selblk"
        ],
        "description": "Return or set the contents of a Form's select buffer, which contains text that can be accessed using runtime structure editor functions."
    },
    "$selected(Entity)": {
        "prefix": "$selected",
        "body": [
            "\\$selected('$1')"
        ],
        "description": "Built-in occurrence attribute that indicates whether the occurrence is selected."
    },
    "$selectedoccs": {
        "prefix": "$selectedoccs",
        "body": [
            "\\$selectedoccs"
        ],
        "description": "Built-in entity attribute that contains a Struct of handles to occurrences that have been selected."
    },
    "$selectlist(Entity)": {
        "prefix": "$selectlist",
        "body": [
            "\\$selectlist('$1')"
        ],
        "description": "Return or set the list of fields that can be read and stored in the database for a specified component entity."
    },
    "$setting(Source, RetrieveProfile, Topic)": {
        "prefix": "$setting",
        "body": [
            "\\$setting('$1', '$2', '$3')"
        ],
        "description": "Retrieve, add, or change configuration settings. Depending on the platform, settings may be stored in initialization files, assignment files, environment variables, logicals, data areas, or the Windows Registry."
    },
    "$setting(Source, Setting, Topic)": {
        "prefix": "$setting",
        "body": [
            "\\$setting('$1', '$2', '$3')"
        ],
        "description": "Retrieve, add, or change configuration settings. Depending on the platform, settings may be stored in initialization files, assignment files, environment variables, logicals, data areas, or the Windows Registry."
    },
    "$signatureproperties(ComponentName, {PropertyList})": {
        "prefix": "$signatureproperties",
        "body": [
            "\\$signatureproperties('$1', '$2')"
        ],
        "description": "Dynamically set the signature properties (also known as connector options) for a Uniface URB connector, or retrieve those that have been dynamically set. Supported only by the SOAP U2.0 connector."
    },
    "$sin(Value)": {
        "prefix": "$sin",
        "body": [
            "\\$sin($1)"
        ],
        "description": "Return the sine of Value."
    },
    "$sortlist(List, {SortElement: SortOptions, {SortElement: SortOptions}})": {
        "prefix": "$sortlist",
        "body": [
            "\\$sortlist('$1', '$2')"
        ],
        "description": "Sort an associative list, an indexed list, or an indexed list of sublists."
    },
    "$sortlistid(List, {SortElement: SortOptions, {SortElement: SortOptions}})": {
        "prefix": "$sortlistid",
        "body": [
            "\\$sortlistid('$1', '$2')"
        ],
        "description": "Sort an associative list in which the value part of each list item is an indexed list."
    },
    "$split(Source, StartPos, SearchFor, {LeftPart, {RightPart}})": {
        "prefix": "$split",
        "body": [
            "\\$sin('$1', '$2', '$3', '$4', '$5')"
        ],
        "description": "Split a string."
    },
    "$sqrt(Value)": {
        "prefix": "$sqrt",
        "body": [
            "\\$sqrt($1)"
        ],
        "description": "Returns the square root of Value."
    },
    "$status": {
        "prefix": "$status",
        "body": [
            "\\status"
        ],
        "description": "Return or set the current condition code."
    },
    "$storetype(Entity)": {
        "prefix": "$storetype",
        "body": [
            "\\$storetype"
        ],
        "description": "Return the type of update for the current occurrence."
    },
    "$string(String)": {
        "prefix": "$string",
        "body": [
            "\\$string('$1')"
        ],
        "description": "Returns a string containing the character represented by each named XML entity in the input parameter. (XML entities are character mappings, not Uniface entities.)"
    },
    "$stripattributes(String)": {
        "prefix": "$stripattributes",
        "body": [
            "\\$stripattributes('$1')"
        ],
        "description": "Return the result of removing character attributes, frames, and rulers from a string."
    },
    "$subsetreturn(Entity)": {
        "prefix": "$subsetreturn",
        "body": [
            "\\$subsetreturn('$1')"
        ],
        "description": "Return only the most recently retrieved occurrences of an entity to its operation entity parameter."
    },
    "$syntax(String, {SyntaxMode})": {
        "prefix": "$syntax",
        "body": [
            "\\$syntax('$1', '$2')"
        ],
        "description": "Convert a string to a syntax string."
    },
    "$sys_charset": {
        "prefix": "$sys_charset",
        "body": [
            "\\$sys_charset"
        ],
        "description": "Set or return the value of $SYS_CHARSET, which defines the character set used to communicate with components that are not Unicode-based, for example C components."
    },
    "$tan(Value)": {
        "prefix": "$tan",
        "body": [
            "\\$tan('$1')"
        ],
        "description": "Return the tangent of Value."
    },
    "$text(IDString)": {
        "prefix": "$text",
        "body": [
            "\\$text('$1')"
        ],
        "description": "Return the text of a message or help text."
    },
    "$textexist(IDString)": {
        "prefix": "$textexist",
        "body": [
            "\\$textexist('$1')"
        ],
        "description": "Return an indication of whether the specified message or help text exists."
    },
    "$totdbocc(Entity)": {
        "prefix": "$totdbocc",
        "body": [
            "\\$totdbocc('$1')"
        ],
        "description": "Return the number of occurrences of the entity that have been retrieved from a database."
    },
    "$totkeys(Entity)": {
        "prefix": "$totkeys",
        "body": [
            "\\$totkeys('$1')"
        ],
        "description": "Return the total number of keys for an entity."
    },
    "$totlines": {
        "prefix": "$totlines",
        "body": [
            "\\$totlines"
        ],
        "description": "Return the total number of lines available on the page for printing."
    },
    "$totocc(Entity)": {
        "prefix": "$totocc",
        "body": [
            "\\$totocc('$1')"
        ],
        "description": "Return the number of occurrences of an entity in the component."
    },
    "$typed(DataTypeConverter(Value))": {
        "prefix": "$typed",
        "body": [
            "\\$typed('$1($2)')"
        ],
        "description": "Explicitly convert data to a specified data type."
    },
    "$ude(Action, Argument1, Argument2, Argument3, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('$1', '$2', '$3', '$4', '$5')"
        ],
        "description": "Perform actions on Repository data and resources, including compiling, exporting, importing, and converting."
    },
    "$ude('archive', 'list', ListOfResources, ArchiveFile, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('archive', 'list', '$1', '$2', '$3')"
        ],
        "description": "Copy resources (compiled runtime objects) to a Uniface archive (UAR) file."
    },
    "$ude('archive', ResourceType, ResourceName, ArchiveFile, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('archive', '$1', '$2', '$3', '$4')"
        ],
        "description": "Copy resources (compiled runtime objects) to a Uniface archive (UAR) file."
    },
    "$ude('compile', ObjectType, ObjectProfile, {'', OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('compile', '$1', '$2', '$3')"
        ],
        "description": "Compile development objects in the Repository."
    },
    "$ude('copy', 'list', Source, Target, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('copy', 'misc', '$1', '$2', '$3')"
        ],
        "description": "Copies one or more entity occurrences from a source database or XML file to another."
    },
    "$ude('delete', 'Type; ResourceType', ResourceName, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('delete', '$1; $2', '$3')"
        ],
        "description": "Delete a symbol table or script listing, or a resource (compiled runtime object) on the $RSO path."
    },
    "$ude('exist', 'Type; ResourceType', ResourceName, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('exist', '$1; $2', '$3', '$4')"
        ],
        "description": "Check whether a compiled runtime object, symbol table, or script listing exists."
    },
    "$ude('export', ObjectType, ObjectProfile, {ZipArchive:FileName}, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('export', '$1', '$2', '$3', '$4')"
        ],
        "description": "Export development object definitions from the Repository."
    },
    "$ude('getReferenceList', 'symboltable; ResourceType', ResourceProfile, {'', OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('getReferenceList', 'symboltable; $1', '$2', '$3', '$4')"
        ],
        "description": "Retrieve a list of all resources (compiled runtime objects) referenced by a specified object."
    },
    "$ude('import', 'misc', {ZipArchive:FileName}, {'', OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('import', 'misc', '$1', '$2', '$3')"
        ],
        "description": "Export development object definitions from the Repository."
    },
    "$ude('import', 'symboltable; {ResourceType}', ResourceProfile, '', {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('import', 'symboltable', '$1', '$2', '$3')"
        ],
        "description": "Import symbol table files into the UXCROSS repository table."
    },
    "$ude('load', 'Type; ResourceType', ResourceName, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('load', '$1; $2', '$3', '$4')"
        ],
        "description": "Load a symbol table or script listing from a file into a field or variable."
    },
    "$ude('lookup', 'Type; ResourceType', ResourceName, {OptionList})": {
        "prefix": "$ude",
        "body": [
            "\\$ude('lookup', '$1; $2', '$3', '$4')"
        ],
        "description": "Returns a list of resources (compiled runtime objects), symbol tables, or script listing."
    },
    "$underline(String)": {
        "prefix": "$underline",
        "body": [
            "\\$underline('$1')"
        ],
        "description": "Return the result of applying the underline character attribute to a string."
    },
    "$uppercase(String, {'NlsLocale' | 'classic' })": {
        "prefix": "$uppercase",
        "body": [
            "\\$uppercase('$1', '$2')"
        ],
        "description": "Convert the specified string uppercase."
    },
    "$user(Path)": {
        "prefix": "$user",
        "body": [
            "\\$user('$1')"
        ],
        "description": "Return the user name used to log on to a database path."
    },
    "$uuid": {
        "prefix": "$uuid",
        "body": [
            "\\$uuid"
        ],
        "description": "Generate a globally unique identifier."
    },
    "$valrep(Field, {List})": {
        "prefix": "$valrep",
        "body": [
            "\\$valrep('$1', '$2')"
        ],
        "description": "Return or set the ValRep used by a widget for a field."
    },
    "$valuepart(AssociativeListItem)": {
        "prefix": "$valuepart",
        "body": [
            "\\$valuepart('$1')"
        ],
        "description": "Return the value part of an associative list item."
    },
    "$variation": {
        "prefix": "$variation",
        "body": [
            "\\$variation"
        ],
        "description": "Return or specify the name of the library containing objects needed by the application or component."
    },
    "$web": {
        "prefix": "$web",
        "body": [
            "\\$web"
        ],
        "description": "Return an indication of whether the current application was started by the Web Request Dispatcher (WRD) or Uniface Anywhere."
    },
    "$webinfo(Function)": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('$1')"
        ],
        "description": "Return or set information about the current HTTP request or response."
    },
    "$webinfo('CookiesIn')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('CookiesIn')"
        ],
        "description": "Returns an associative list of cookies present in the request"
    },
    "$webinfo('HttpResponseHeaders')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('HttpResponseHeaders')"
        ],
        "description": "Use the $webinfo HTTP header functions to transfer HTTP protocol information between a browser and a server."
    },
    "$webinfo('HttpRequestHeaders')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('HttpRequestHeaders')"
        ],
        "description": "Use the $webinfo HTTP header functions to transfer HTTP protocol information between a browser and a server."
    },
    "$webinfo('HttpRequestParams')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('HttpRequestParams')"
        ],
        "description": "Use the $webinfo HTTP header functions to transfer HTTP protocol information between a browser and a server."
    },
    "$webinfo('Data')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('Data')"
        ],
        "description": "$webinfo('Data') is used only in dynamic server pages (DSPs). It is used by both webload and websave to pass data between the server backend and browser frontend of a DSP component."
    },
    "$webinfo('PathInput')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('PathInput')"
        ],
        "description": "$webinfo('PathInput') is used in both dynamic and static server pages (USPs) for RESTful URLs. For more information, see Uniface URL Format. If the request was formatted as a RESTful URL, $webinfo('PathInput') returns Uniface list of input parameters. You can process the list in ProcScript before returning a response using websave (for DSPs) or webgen (for USPs)."
    },
    "$webinfo('Input')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('Input')"
        ],
        "description": "$webinfo('Input') returns an associative list containing the input of the HTTP request, which is loaded into the server page by the webget or webload command. You can then process the list in ProcScript to extract the information needed to process the data and provide a response."
    },
    "$webinfo('Output')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('Output')"
        ],
        "description": "$webinfo('Output') contains the data sent to the web browser from a server page. Initially this is empty; it is populated by the webgen or websave commands."
    },
    "$webinfo('Locale')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('Locale')"
        ],
        "description": "Use $webinfo('Locale') to set the client-side locale in a DSP application. The value is used by the DSP client for locale-based formatting."
    },
    "$webinfo('RequestContext')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('RequestContext')"
        ],
        "description": "Get or set request context attributes."
    },
    "$webinfo('SessionCommands')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('SessionCommands')"
        ],
        "description": "Use $webinfo('SessionCommands') to invoke session management API calls."
    },
    "$webinfo('WebServerContext')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('WebServerContext')"
        ],
        "description": "The WebServerContext topic contains an associative list of properties that provide state information about the Uniface Server and the context in which it is running."
    },
    "$webinfo('Salt')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('SessionCommands')"
        ],
        "description": "Salt string used to generate and verify a hash using webgen and webget respectively."
    },
    "$webinfo('SaltIn')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('SessionCommands')"
        ],
        "description": "Salt string used by webget to verify a hash."
    },
    "$webinfo('SaltOut')": {
        "prefix": "$webinfo",
        "body": [
            "\\$webinfo('SessionCommands')"
        ],
        "description": "Salt string used by webgen to generate a hash."
    },
    "$webrequesttype": {
        "prefix": "$webrequesttype",
        "body": [
            "\\$webrequesttype"
        ],
        "description": "Returns a value indicating the type of request from the browser for the current DSP component instance."
    },
    "$webresponsetype": {
        "prefix": "$webresponsetype",
        "body": [
            "\\$webresponsetype"
        ],
        "description": "Returns a value indicating the response expected by the browser for the current DSP component instance."
    },
    "$widgetoperation(WidgetOperation, {Params})": {
        "prefix": "$widgetoperation",
        "body": [
            "\\$webrequesttype('$1'. '$2')"
        ],
        "description": "Activates a widget operation of the references widget."
    },
    "$windowproperties(InstanceName, PropertyList)": {
        "prefix": "$windowproperties",
        "body": [
            "\\$windowproperties('$1', '$2')"
        ],
        "description": "Set or return the current window properties of a Form instance."
    }
}